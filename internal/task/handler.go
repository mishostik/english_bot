package task

import (
	"context"
	constants "english_bot/cconstants"
	"english_bot/internal/incorrect/repository"
	"english_bot/internal/message"
	"english_bot/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"log"
)

type ExerciseHandler struct {
	messageUsecase message.Usecase
	incorrectRepo  *repository.IncorrectRepository
}

func NewExerciseHandler(mUsecase message.Usecase, incRepo *repository.IncorrectRepository) *ExerciseHandler {
	return &ExerciseHandler{
		messageUsecase: mUsecase,
		incorrectRepo:  incRepo,
	}
}

func (h *ExerciseHandler) Respond(ctx context.Context, update tgbotapi.Update) (string, *models.Task, []string, error) {
	var (
		messageText      string
		buttons          []string
		err              error
		incorrectAnswers []string
	)

	if len(update.Message.Text) == 0 {
		return "", nil, nil, nil
	}

	if update.Message.Text == "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ" {
		messageText = "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π"
		buttons = []string{constants.MsgTranslateRuToEn, constants.MsgTranslateEnToRu, constants.MsgFillGaps}

	} else {
		incorrectAnswers = []string{"mock", "mock", "mock"}
		switch update.Message.Text {
		// TODO –¥–æ–±–∞–≤–∏—Ç—å 1 –∏–∑ 3—Ö –∑–∞–¥–∞—á–∏ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å +1 –∏–ª–∏ -1 (—Ä–∞–Ω–¥–æ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)
		case "–ª—é–±—ã–µ":
			// —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è "–ª—é–±—ã–µ" - –æ–¥–∏–Ω —Ä–∞–∑. –¥–æ–±–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π —é–∑–µ—Ä —Å—Ç–µ–π—Ç?
			// TODO –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É
			task, err = h.messageUsecase.GetRandomTask(ctx, update.Message.From.ID)
			if err != nil {
				return "", nil, nil, err
			}
		case "–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π":
			incorrectAnswers = h.messageUsecase.GetRandomIncorrectAnswers(constants.IncorrectAnswersEn, 3)
			task, err = h.messageUsecase.GetExerciseTranslate(ctx, update.Message.From.ID, 1)
			if err != nil {
				return "", nil, nil, err
			}

		case "–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π":
			incorrectAnswers = h.messageUsecase.GetRandomIncorrectAnswers(constants.IncorrectAnswersRu, 3)
			task, err = h.messageUsecase.GetExerciseTranslate(ctx, update.Message.From.ID, 2)
			if err != nil {
				return "", nil, nil, err
			}

		case "–∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏":
			task, err = h.messageUsecase.GetExerciseFillGaps(ctx, update.Message.From.ID, 3)
			if err != nil {
				return "", nil, nil, err
			}

		default:
			messageText = "–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É üò¢"
		}
		if task != nil {
			messageText = task.Question
		} else {
			messageText = "–∑–∞–¥–∞—á–∏ –Ω–µ—Ç üò±"
		}

		// get incorrect answers from db
		incorrect, err := h.incorrectRepo.GetAnswers(ctx, task.ID)
		if err != nil {
			log.Println("error getting incorrect answers")
		}

		buttons = []string{task.Answer, incorrect.A, incorrect.B, incorrect.C}
		for i := 0; i < len(buttons); i++ {
			if buttons[i] == "" && len(incorrectAnswers) > 0 {
				buttons[i] = incorrectAnswers[0]
				incorrectAnswers = incorrectAnswers[1:]
			}
		}
	}

	return messageText, task, buttons, nil
}
